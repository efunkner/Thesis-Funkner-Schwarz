-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\biquad_test_v6_old_IP\BiquadFilter_HP_Butter_ip_2_4_src_Biquad_Filter1.vhd
-- Created: 2025-06-02 17:17:04
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BiquadFilter_HP_Butter_ip_2_4_src_Biquad_Filter1
-- Source Path: biquad_test_v6_old_IP/Biquad Filtrer/Biquad Filter1
-- Hierarchy Level: 1
-- Model version: 1.88
-- 
-- Biquad Filter
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY BiquadFilter_HP_Butter_ip_2_4_src_Biquad_Filter1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        validOut                          :   OUT   std_logic
        );
END BiquadFilter_HP_Butter_ip_2_4_src_Biquad_Filter1;


ARCHITECTURE rtl OF BiquadFilter_HP_Butter_ip_2_4_src_Biquad_Filter1 IS

  -- Component Declarations
  COMPONENT BiquadFilter_HP_Butter_ip_2_4_src_BiquadDF2Section1_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : BiquadFilter_HP_Butter_ip_2_4_src_BiquadDF2Section1_block
    USE ENTITY work.BiquadFilter_HP_Butter_ip_2_4_src_BiquadDF2Section1_block(rtl);

  -- Signals
  SIGNAL dataIn_signed                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec0reg                          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec0mul                          : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL sec0mulreg                       : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL sec0dtc                          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec0out                          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec0validreg                     : std_logic;
  SIGNAL sec0mulvalidreg                  : std_logic;
  SIGNAL sec0validout                     : std_logic;
  SIGNAL sec1out                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sec1validout                     : std_logic;
  SIGNAL sec1mulvalidreg                  : std_logic;
  SIGNAL sec1validout_1                   : std_logic;
  SIGNAL zerooutconst                     : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec1out_signed                   : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec1mul                          : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL sec1mulreg                       : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL sec1dtc                          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL sec1out_1                        : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL preout                           : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL dataOut_tmp                      : signed(31 DOWNTO 0);  -- sfix32_En16

BEGIN
  u_BiquadSection1_inst : BiquadFilter_HP_Butter_ip_2_4_src_BiquadDF2Section1_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => std_logic_vector(sec0out),  -- sfix32_En16
              validIn => sec0validout,
              dataOut => sec1out,  -- sfix32_En16
              validOut => sec1validout
              );

  dataIn_signed <= signed(dataIn);

  sec0dataregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0reg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        sec0reg <= dataIn_signed;
      END IF;
    END IF;
  END PROCESS sec0dataregister_process;


  sec0mul <= resize(sec0reg & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  sec0muldataregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0mulreg <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        sec0mulreg <= sec0mul;
      END IF;
    END IF;
  END PROCESS sec0muldataregister_process;


  sec0dtc <= sec0mulreg(61 DOWNTO 30);

  sec0OutRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0out <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        sec0out <= sec0dtc;
      END IF;
    END IF;
  END PROCESS sec0OutRegister_process;


  sec0validregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0validreg <= '0';
      ELSIF enb = '1' THEN
        sec0validreg <= validIn;
      END IF;
    END IF;
  END PROCESS sec0validregister_process;


  sec0mulvalidregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0mulvalidreg <= '0';
      ELSIF enb = '1' THEN
        sec0mulvalidreg <= sec0validreg;
      END IF;
    END IF;
  END PROCESS sec0mulvalidregister_process;


  sec0validoutregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec0validout <= '0';
      ELSIF enb = '1' THEN
        sec0validout <= sec0mulvalidreg;
      END IF;
    END IF;
  END PROCESS sec0validoutregister_process;


  sec1mulvalidregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec1mulvalidreg <= '0';
      ELSIF enb = '1' THEN
        sec1mulvalidreg <= sec1validout;
      END IF;
    END IF;
  END PROCESS sec1mulvalidregister_process;


  sec1validoutregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec1validout_1 <= '0';
      ELSIF enb = '1' THEN
        sec1validout_1 <= sec1mulvalidreg;
      END IF;
    END IF;
  END PROCESS sec1validoutregister_process;


  zerooutconst <= to_signed(0, 32);

  sec1out_signed <= signed(sec1out);

  sec1mul <= resize(sec1out_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  sec1muldataregister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec1mulreg <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        sec1mulreg <= sec1mul;
      END IF;
    END IF;
  END PROCESS sec1muldataregister_process;


  sec1dtc <= sec1mulreg(61 DOWNTO 30);

  sec1OutRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sec1out_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        sec1out_1 <= sec1dtc;
      END IF;
    END IF;
  END PROCESS sec1OutRegister_process;


  
  preout <= zerooutconst WHEN sec1validout_1 = '0' ELSE
      sec1out_1;

  OutRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataOut_tmp <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        dataOut_tmp <= preout;
      END IF;
    END IF;
  END PROCESS OutRegister_process;


  dataOut <= std_logic_vector(dataOut_tmp);

  ValidOutRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOut <= '0';
      ELSIF enb = '1' THEN
        validOut <= sec1validout_1;
      END IF;
    END IF;
  END PROCESS ValidOutRegister_process;


END rtl;

