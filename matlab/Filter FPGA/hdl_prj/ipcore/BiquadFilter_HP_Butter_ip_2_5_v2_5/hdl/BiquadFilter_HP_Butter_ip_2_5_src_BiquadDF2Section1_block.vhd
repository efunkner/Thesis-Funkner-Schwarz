-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\biquad_test_v6_old_IP\BiquadFilter_HP_Butter_ip_2_5_src_BiquadDF2Section1_block.vhd
-- Created: 2025-06-02 17:19:32
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: BiquadFilter_HP_Butter_ip_2_5_src_BiquadDF2Section1_block
-- Source Path: biquad_test_v6_old_IP/Biquad Filtrer/Biquad Filter1/BiquadDF2Section1
-- Hierarchy Level: 2
-- Model version: 1.88
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY BiquadFilter_HP_Butter_ip_2_5_src_BiquadDF2Section1_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        validOut                          :   OUT   std_logic
        );
END BiquadFilter_HP_Butter_ip_2_5_src_BiquadDF2Section1_block;


ARCHITECTURE rtl OF BiquadFilter_HP_Butter_ip_2_5_src_BiquadDF2Section1_block IS

  -- Signals
  SIGNAL dataIn_signed                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL inReg                            : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL inValidReg                       : std_logic;
  SIGNAL state1                           : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL state2                           : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL denProd2                         : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL denOut                           : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL denProd1                         : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL adder_add_cast                   : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL adder_add_cast_1                 : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL denSum2                          : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL adder_add_cast_2                 : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL denSum1                          : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL numPrePipe1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL numProd1                         : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPostPipe1                     : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPostPipe1Dly                  : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPrePipe2                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL numProd2                         : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPostPipe2                     : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPrePipe3                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL numProd3                         : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL numPostPipe3                     : signed(63 DOWNTO 0);  -- sfix64_En46
  SIGNAL adder_add_cast_3                 : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL adder_add_cast_4                 : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL numSum2                          : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL numSum2Dly                       : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL adder_add_cast_5                 : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL numSum1                          : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL numSumReg_1                      : signed(66 DOWNTO 0);  -- sfix67_En46
  SIGNAL convertOut                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL dataOut_tmp                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL intdelay_reg                     : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]

BEGIN
  dataIn_signed <= signed(dataIn);

  InRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        inReg <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        inReg <= dataIn_signed;
      END IF;
    END IF;
  END PROCESS InRegister_process;


  InValidRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        inValidReg <= '0';
      ELSIF enb = '1' THEN
        inValidReg <= validIn;
      END IF;
    END IF;
  END PROCESS InValidRegister_process;


  State2Reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        state2 <= to_signed(0, 32);
      ELSIF enb = '1' AND inValidReg = '1' THEN
        state2 <= state1;
      END IF;
    END IF;
  END PROCESS State2Reg_process;


  denProd2 <= to_signed(-971577683, 32) * state2;

  State1Reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        state1 <= to_signed(0, 32);
      ELSIF enb = '1' AND inValidReg = '1' THEN
        state1 <= denOut;
      END IF;
    END IF;
  END PROCESS State1Reg_process;


  denProd1 <= to_signed(2027821515, 32) * state1;

  adder_add_cast <= resize(denProd1, 67);
  adder_add_cast_1 <= resize(denProd2, 67);
  denSum2 <= adder_add_cast + adder_add_cast_1;

  adder_add_cast_2 <= resize(inReg & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67);
  denSum1 <= adder_add_cast_2 + denSum2;

  denOut <= denSum1(61 DOWNTO 30);

  numPreReg1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPrePipe1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        numPrePipe1 <= denOut;
      END IF;
    END IF;
  END PROCESS numPreReg1_process;


  numProd1 <= resize(numPrePipe1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  numPostReg1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPostPipe1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        numPostPipe1 <= numProd1;
      END IF;
    END IF;
  END PROCESS numPostReg1_process;


  numDlyReg1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPostPipe1Dly <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        numPostPipe1Dly <= numPostPipe1;
      END IF;
    END IF;
  END PROCESS numDlyReg1_process;


  numPreReg2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPrePipe2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        numPrePipe2 <= state1;
      END IF;
    END IF;
  END PROCESS numPreReg2_process;


  numProd2 <= to_signed(-2147483612, 32) * numPrePipe2;

  numPostReg2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPostPipe2 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        numPostPipe2 <= numProd2;
      END IF;
    END IF;
  END PROCESS numPostReg2_process;


  numPreReg3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPrePipe3 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        numPrePipe3 <= state2;
      END IF;
    END IF;
  END PROCESS numPreReg3_process;


  numProd3 <= to_signed(1073741840, 32) * numPrePipe3;

  numPostReg3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numPostPipe3 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        numPostPipe3 <= numProd3;
      END IF;
    END IF;
  END PROCESS numPostReg3_process;


  adder_add_cast_3 <= resize(numPostPipe2, 67);
  adder_add_cast_4 <= resize(numPostPipe3, 67);
  numSum2 <= adder_add_cast_3 + adder_add_cast_4;

  numSumDlyReg2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numSum2Dly <= to_signed(0, 67);
      ELSIF enb = '1' THEN
        numSum2Dly <= numSum2;
      END IF;
    END IF;
  END PROCESS numSumDlyReg2_process;


  adder_add_cast_5 <= resize(numPostPipe1Dly, 67);
  numSum1 <= adder_add_cast_5 + numSum2Dly;

  numSumReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        numSumReg_1 <= to_signed(0, 67);
      ELSIF enb = '1' THEN
        numSumReg_1 <= numSum1;
      END IF;
    END IF;
  END PROCESS numSumReg_process;


  convertOut <= numSumReg_1(61 DOWNTO 30);

  outputReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataOut_tmp <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        dataOut_tmp <= convertOut;
      END IF;
    END IF;
  END PROCESS outputReg_process;


  dataOut <= std_logic_vector(dataOut_tmp);

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        intdelay_reg(0) <= validIn;
        intdelay_reg(5 DOWNTO 1) <= intdelay_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  validOut <= intdelay_reg(5);

END rtl;

