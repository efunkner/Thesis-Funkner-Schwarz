-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\biquad_Filter_v7_IP\Gain_10.vhd
-- Created: 2025-06-16 15:19:10
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Gain_10
-- Source Path: Gain_10
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Gain_10 IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TREADY         :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TDATA           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_Slave_TVALID          :   IN    std_logic;  -- ufix1
        AXI4_Stream_Master_TDATA          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Stream_Master_TVALID         :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Master_TLAST          :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Slave_TREADY          :   OUT   std_logic  -- ufix1
        );
END Gain_10;


ARCHITECTURE rtl OF Gain_10 IS

  -- Component Declarations
  COMPONENT Gain_10_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Gain_10_axi4_stream_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Slave_TDATA         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Slave_TVALID        :   IN    std_logic;  -- ufix1
          auto_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TREADY        :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT Gain_10_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          In2                             :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
          Out2                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT Gain_10_axi4_stream_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Master_TREADY       :   IN    std_logic;  -- ufix1
          user_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          user_valid                      :   IN    std_logic;  -- ufix1
          packet_size_axi4_stream_master  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Master_TDATA        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Stream_Master_TVALID       :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Master_TLAST        :   OUT   std_logic;  -- ufix1
          auto_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Gain_10_reset_sync
    USE ENTITY work.Gain_10_reset_sync(rtl);

  FOR ALL : Gain_10_axi4_stream_slave
    USE ENTITY work.Gain_10_axi4_stream_slave(rtl);

  FOR ALL : Gain_10_dut
    USE ENTITY work.Gain_10_dut(rtl);

  FOR ALL : Gain_10_axi4_stream_master
    USE ENTITY work.Gain_10_axi4_stream_master(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL axi_enable                       : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL const_packet_size_axi4_stream_master : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL auto_ready_axi4_stream_master    : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_data_unsigned           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In1_sig                          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL auto_ready_dut_enb               : std_logic;  -- ufix1
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL Out1_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out2_sig                         : std_logic;  -- ufix1
  SIGNAL Out1_sig_signed                  : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL top_user_data_1                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Stream_Master_TDATA_tmp     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_Gain_10_reset_sync_inst : Gain_10_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset
              );

  u_Gain_10_axi4_stream_slave_inst : Gain_10_axi4_stream_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Slave_TDATA => AXI4_Stream_Slave_TDATA,  -- ufix32
              AXI4_Stream_Slave_TVALID => AXI4_Stream_Slave_TVALID,  -- ufix1
              auto_ready => auto_ready_axi4_stream_master,  -- ufix1
              AXI4_Stream_Slave_TREADY => AXI4_Stream_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix32
              user_valid => top_user_valid  -- ufix1
              );

  u_Gain_10_dut_inst : Gain_10_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => dut_enable,  -- ufix1
              In1 => std_logic_vector(In1_sig),  -- sfix32_En16
              In2 => top_user_valid,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              Out1 => Out1_sig,  -- sfix32_En16
              Out2 => Out2_sig  -- ufix1
              );

  u_Gain_10_axi4_stream_master_inst : Gain_10_axi4_stream_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1_1,
              AXI4_Stream_Master_TREADY => AXI4_Stream_Master_TREADY,  -- ufix1
              user_data => std_logic_vector(top_user_data_1),  -- ufix32
              user_valid => Out2_sig,  -- ufix1
              packet_size_axi4_stream_master => std_logic_vector(const_packet_size_axi4_stream_master),  -- ufix32
              AXI4_Stream_Master_TDATA => AXI4_Stream_Master_TDATA_tmp,  -- ufix32
              AXI4_Stream_Master_TVALID => AXI4_Stream_Master_TVALID,  -- ufix1
              AXI4_Stream_Master_TLAST => AXI4_Stream_Master_TLAST,  -- ufix1
              auto_ready => auto_ready_axi4_stream_master  -- ufix1
              );

  axi_enable <= '1';

  const_1_1 <= '1';

  enb <= const_1_1;

  reset_cm <=  NOT IPCORE_RESETN;

  const_packet_size_axi4_stream_master <= to_unsigned(262144, 32);

  top_user_data_unsigned <= unsigned(top_user_data);

  In1_sig <= signed(top_user_data_unsigned);

  reg_process : PROCESS (IPCORE_CLK)
  BEGIN
    IF IPCORE_CLK'EVENT AND IPCORE_CLK = '1' THEN
      IF reset = '1' THEN
        auto_ready_dut_enb <= '0';
      ELSIF enb = '1' THEN
        auto_ready_dut_enb <= auto_ready_axi4_stream_master;
      END IF;
    END IF;
  END PROCESS reg_process;


  dut_enable <= axi_enable AND auto_ready_dut_enb;

  Out1_sig_signed <= signed(Out1_sig);

  top_user_data_1 <= unsigned(Out1_sig_signed);

  AXI4_Stream_Master_TDATA <= AXI4_Stream_Master_TDATA_tmp;

END rtl;

