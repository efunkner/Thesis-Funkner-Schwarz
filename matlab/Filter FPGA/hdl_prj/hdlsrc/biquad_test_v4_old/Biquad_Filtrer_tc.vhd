-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\biquad_test_v4_old\Biquad_Filtrer_tc.vhd
-- Created: 2025-05-20 16:31:26
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Biquad_Filtrer_tc
-- Source Path: Biquad_Filtrer_tc
-- Hierarchy Level: 1
-- 
-- Master clock enable input: clk_enable
-- 
-- enb         : identical to clk_enable
-- enb_1_65_0  : 65x slower than clk with last phase
-- enb_1_65_1  : 65x slower than clk with phase 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Biquad_Filtrer_tc IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        enb                               :   OUT   std_logic;
        enb_1_65_0                        :   OUT   std_logic;
        enb_1_65_1                        :   OUT   std_logic
        );
END Biquad_Filtrer_tc;


ARCHITECTURE rtl OF Biquad_Filtrer_tc IS

  -- Signals
  SIGNAL count65                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL comp_0_tmp                       : std_logic;
  SIGNAL phase_0_tmp                      : std_logic;
  SIGNAL phase_0                          : std_logic;
  SIGNAL enb_1_65_0_1                     : std_logic;
  SIGNAL comp_1_tmp                       : std_logic;
  SIGNAL phase_1_tmp                      : std_logic;
  SIGNAL phase_1                          : std_logic;
  SIGNAL enb_1_65_1_1                     : std_logic;

BEGIN
  enb <= clk_enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 64
  counter_65_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        count65 <= to_unsigned(16#01#, 7);
      ELSIF clk_enable = '1' THEN
        IF count65 >= to_unsigned(16#40#, 7) THEN 
          count65 <= to_unsigned(16#00#, 7);
        ELSE 
          count65 <= count65 + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS counter_65_process;


  
  comp_0_tmp <= '1' WHEN count65 = to_unsigned(16#40#, 7) ELSE
      '0';

  phase_0_tmp <= comp_0_tmp AND clk_enable;

  phase_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        phase_0 <= '0';
      ELSIF clk_enable = '1' THEN
        phase_0 <= phase_0_tmp;
      END IF;
    END IF;
  END PROCESS phase_delay_process;


  enb_1_65_0_1 <= phase_0 AND clk_enable;

  enb_1_65_0 <= enb_1_65_0_1;

  
  comp_1_tmp <= '1' WHEN count65 = to_unsigned(16#00#, 7) ELSE
      '0';

  phase_1_tmp <= comp_1_tmp AND clk_enable;

  phase_delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        phase_1 <= '1';
      ELSIF clk_enable = '1' THEN
        phase_1 <= phase_1_tmp;
      END IF;
    END IF;
  END PROCESS phase_delay_1_process;


  enb_1_65_1_1 <= phase_1 AND clk_enable;

  enb_1_65_1 <= enb_1_65_1_1;

END rtl;

